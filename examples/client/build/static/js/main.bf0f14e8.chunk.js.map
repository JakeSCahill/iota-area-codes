{"version":3,"sources":["assets/logo.svg","factories/serviceFactory.ts","services/configurationService.ts","services/tangleExplorerService.ts","app/routes/Conversion.tsx","helpers/textHelper.ts","helpers/trytesHelper.ts","services/apiClient.ts","app/components/IACTransactionCard.tsx","app/routes/Server.tsx","app/App.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","ServiceFactory","Object","classCallCheck","this","createClass","key","value","name","instanceCallback","_services","_instances","ConfigurationService","_configuration","_load","asyncToGenerator","regenerator_default","a","mark","_callee","path","response","wrap","_context","prev","next","fetch","sent","ok","json","abrupt","Error","t0","concat","message","stop","_x","apply","arguments","TangleExplorerService","config","_config","bundleHash","window","open","bundles","replace","transactionHash","transactions","Conversion","props","_this","possibleConstructorReturn","getPrototypeOf","call","_map","_maps","_highlight","get","state","_this2","react_default","createElement","Fragment","dist","level","type","placeholder","userIotaAreaCode","onChange","e","setState","target","validateIotaAreaCode","disabled","userIotaAreaCodeIsValid","onClick","iotaAreaCode","userOpenLocationCode","validateOpenLocationCode","userOpenLocationCodeIsValid","openLocationCode","className","lib_default","bootstrapURLKeys","googleMapsKey","defaultCenter","lat","lng","center","latitude","longitude","defaultZoom","zoom","mapClicked","onGoogleApiLoaded","apiLoaded","map","maps","yesIWantToUseGoogleMapApiInternals","undefined","small","reset","event","updateIac","IotaAreaCodes","iac","area","codePrecision","updateHighlight","setMap","Rectangle","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","bounds","south","latitudeLow","north","latitudeHigh","west","longitudeLow","east","longitudeHigh","isValid","err","Component","TextHelper","chr","charCodeAt","toString","substr","match","grp","String","fromCharCode","parseInt","TrytesHelper","obj","JSON","stringify","encoded","encodeNonASCII","asciiToTrytes","trytes","trimmed","length","ascii","trytesToAscii","decodeNonASCII","parse","ApiClient","endpoint","iacCallback","_endpoint","_socket","_iacCallback","SocketIOClient","on","data","IACTransactionCard","_tangleExplorerService","_area","payload","fromTrytes","transaction","signatureMessageFragment","showMap","long","hash","role","classnames","iac-transaction--map__hidden","Server","_apiClient","apiEndpoint","handleTransaction","isBusy","isErrored","status","txMessage","iacTransactions","readOnly","createTransaction","isError","color","item","app_components_IACTransactionCard","_callee3","iota","nextAddress","bundle","_context3","composeAPI","provider","_this3","node","generateAddress","seed","prepareTransfers","repeat","address","toTrytes","tag","sendTrytes","depth","mwm","unshift","asTransactionObject","slice","App","statusColor","isSideMenuOpen","configService","configId","process","REACT_APP_CONFIG_ID","load","register","tangleExplorer","title","topLinks","contentHomePage","headerTopLinks","logo","compact","hamburgerClick","hamburgerMediaQuery","Link","to","isMenuOpen","handleClose","history","items","isExpanded","link","selectedItemLink","location","pathname","mediaQuery","Switch","Route","exact","component","app_routes_Conversion","Date","now","routes_Server","sections","footerSections","staticContent","footerStaticContent","id","googleAnalyticsId","withRouter","ReactDOM","render","BrowserRouter","app_App","document","getElementById"],"mappings":"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","file":"static/js/main.bf0f14e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7ef83fd5.svg\";","/**\n * Factory for creating services.\n */\nexport class ServiceFactory {\n    /**\n     * Store the service callbacks.\n     */\n    private static readonly _services: { [name: string]: () => any } = {};\n    /**\n     * Store the created instances.\n     */\n    private static readonly _instances: { [name: string]: any } = {};\n\n    /**\n     * Register a new service.\n     * @param name The name of the service.\n     * @param instanceCallback The callback to create an instance.\n     */\n    public static register(name: string, instanceCallback: () => any): void {\n        this._services[name] = instanceCallback;\n    }\n\n    /**\n     * Unregister a service.\n     * @param name The name of the service to unregister.\n     */\n    public static unregister(name: string): void {\n        delete this._services[name];\n    }\n\n    /**\n     * Get a service instance.\n     * @param name The name of the service to get.\n     * @returns An instance of the service.\n     */\n    public static get<T>(name: string): T {\n        if (!this._instances[name] && this._services[name]) {\n            this._instances[name] = this._services[name]();\n        }\n        return this._instances[name];\n    }\n}\n","/**\n * ConfigurationService Class.\n */\nexport class ConfigurationService<T> {\n    /**\n     * The configuration.\n     */\n    private _configuration!: T;\n\n    /**\n     * Load the configuration.\n     * @param path The path to the configuration.\n     * @returns Promise.\n     */\n    public async load(path: string): Promise<T> {\n        try {\n            const response = await fetch(path);\n            if (response.ok) {\n                this._configuration = await response.json();\n                return this._configuration;\n            } else {\n                throw new Error(`Could not find file`);\n            }\n        } catch (err) {\n            throw new Error(`Error loading configuration file\\n${err.message}`);\n        }\n    }\n\n    /**\n     * Get the configuration.\n     * @returns The configuration.\n     */\n    public get(): T {\n        return this._configuration;\n    }\n}\n","import { ITangleExplorerConfiguration } from \"../models/config/ITangleExplorerConfiguration\";\n\n/**\n * Helper functions for use with tangle explorer.\n */\nexport class TangleExplorerService {\n    /**\n     * The explorer config.\n     */\n    private readonly _config: ITangleExplorerConfiguration;\n\n    /**\n     * Create a new instance of TangleExplorerService.\n     * @param config The config for the api.\n     */\n    constructor(config: ITangleExplorerConfiguration) {\n        this._config = config;\n    }\n\n    /**\n     * Open a bundle hash in the explorer.\n     * @param bundleHash The bundle hash.\n     */\n    public bundle(bundleHash?: string): void {\n        if (bundleHash) {\n            window.open(this._config.bundles.replace(\":bundleHash\", bundleHash), \"_blank\");\n        }\n    }\n\n    /**\n     * Open a transaction hash in the explorer.\n     * @param transactionHash The transaction hash.\n     */\n    public transaction(transactionHash?: string): void {\n        if (transactionHash) {\n            window.open(this._config.transactions.replace(\":transactionHash\", transactionHash), \"_blank\");\n        }\n    }\n}\n","import GoogleMapReact, { ClickEventValue } from \"google-map-react\";\nimport * as IotaAreaCodes from \"iota-area-codes\";\nimport { Button, Fieldset, Form, FormActions, Heading } from \"iota-react-components\";\nimport React, { Component, ReactNode } from \"react\";\nimport { ServiceFactory } from \"../../factories/serviceFactory\";\nimport { IConfiguration } from \"../../models/config/IConfiguration\";\nimport { ConfigurationService } from \"../../services/configurationService\";\nimport \"./Conversion.scss\";\nimport { ConversionFileState } from \"./ConversionState\";\n\n/**\n * Component which will show conversions with IACs.\n */\nclass Conversion extends Component<any, ConversionFileState> {\n    /**\n     * The configuration.\n     */\n    private readonly _configuration: IConfiguration;\n\n    /**\n     * The map object.\n     */\n    private _map: any;\n\n    /**\n     * The maps object.\n     */\n    private _maps: any;\n\n    /**\n     * Map highlight polygon.\n     */\n    private _highlight: any;\n\n    /**\n     * Create a new instance of Conversion.\n     * @param props The props.\n     */\n    constructor(props: any) {\n        super(props);\n\n        this._configuration = ServiceFactory.get<ConfigurationService<IConfiguration>>(\"configuration\").get();\n\n        this.state = {\n        };\n    }\n\n    /**\n     * Render the component.\n     * @returns The node to render.\n     */\n    public render(): ReactNode {\n        return (\n            <React.Fragment>\n                <Heading level={1}>Map</Heading>\n                <p>Click on the map to display the location details, or enter a location code</p>\n                <Form>\n                    <Fieldset>\n                        <label>IOTA Area Code</label>\n                        <input\n                            type=\"text\"\n                            placeholder=\"Please enter the iota area code\"\n                            value={this.state.userIotaAreaCode}\n                            onChange={(e) => this.setState({ userIotaAreaCode: e.target.value }, () => this.validateIotaAreaCode())}\n                        />\n                        <Button disabled={!this.state.userIotaAreaCodeIsValid} onClick={() => this.iotaAreaCode()}>Lookup</Button>\n                    </Fieldset>\n                    <Fieldset>\n                        <label>Open Location Code</label>\n                        <input\n                            type=\"text\"\n                            placeholder=\"Please enter the open location code\"\n                            value={this.state.userOpenLocationCode}\n                            onChange={(e) => this.setState({ userOpenLocationCode: e.target.value }, () => this.validateOpenLocationCode())}\n                        />\n                        <Button disabled={!this.state.userOpenLocationCodeIsValid} onClick={() => this.openLocationCode()}>Lookup</Button>\n                    </Fieldset>\n                    <div className=\"map-container\">\n                        <GoogleMapReact\n                            bootstrapURLKeys={{ key: this._configuration.googleMapsKey }}\n                            defaultCenter={{\n                                lat: 52.529562,\n                                lng: 13.413047\n                            }}\n                            center={{\n                                lat: this.state.latitude || 52.529562,\n                                lng: this.state.longitude || 13.413047\n                            }}\n                            defaultZoom={19}\n                            zoom={this.state.zoom || 19}\n                            onClick={(e) => this.mapClicked(e)}\n                            onGoogleApiLoaded={(e) => this.apiLoaded(e.map, e.maps)}\n                            yesIWantToUseGoogleMapApiInternals={true}\n                            onChange={(e) => this.setState({ zoom: e.zoom })}\n                        />\n                    </div>\n                    {this.state.latitude !== undefined && this.state.longitude !== undefined && (\n                        <Fieldset small={true}>\n                            <label>Latitude</label>\n                            <span>{this.state.latitude}</span>\n                            <label>Longitude</label>\n                            <span>{this.state.longitude}</span>\n                        </Fieldset>\n                    )}\n                    {this.state.iotaAreaCode !== undefined && this.state.openLocationCode !== undefined && (\n                        <Fieldset small={true}>\n                            <label>IOTA Area Code</label>\n                            <span>{this.state.iotaAreaCode}</span>\n                            <label>Open Location Code</label>\n                            <span>{this.state.openLocationCode}</span>\n                        </Fieldset>\n                    )}\n                    <FormActions>\n                        <Button onClick={() => this.reset()}>Reset</Button>\n                    </FormActions>\n                </Form>\n            </React.Fragment>\n        );\n    }\n\n    /**\n     * The google maps api was loaded capture the maps and map object.\n     * @param map The map object.\n     * @param maps The maps object.\n     */\n    private apiLoaded(map: any, maps: any): void {\n        this._map = map;\n        this._maps = maps;\n    }\n\n    /**\n     * The map was clicked.\n     * @param event The click event.\n     */\n    private mapClicked(event: ClickEventValue): void {\n        this.updateIac(IotaAreaCodes.encode(event.lat, event.lng));\n    }\n\n    /**\n     * Update based on iota area code.\n     * @param iac The area code.\n     */\n    private updateIac(iac: string): void {\n        const area = IotaAreaCodes.decode(iac);\n\n        this.setState({\n            latitude: area.latitude,\n            longitude: area.longitude,\n            iotaAreaCode: iac,\n            openLocationCode: IotaAreaCodes.toOpenLocationCode(iac),\n            zoom: area.codePrecision === 2 ? 1 : area.codePrecision * 2\n        });\n\n        this.updateHighlight(area);\n    }\n\n    /**\n     * Update the highlight on the map.\n     * @param area The area to highlight.\n     */\n    private updateHighlight(area: IotaAreaCodes.IacCodeArea): void {\n        if (this._highlight) {\n            this._highlight.setMap(undefined);\n        }\n\n        this._highlight = new this._maps.Rectangle({\n            strokeColor: \"#FF0000\",\n            strokeOpacity: 0.8,\n            strokeWeight: 2,\n            fillColor: \"#FF0000\",\n            fillOpacity: 0.35,\n            map: this._map,\n            bounds: {\n                south: area.latitudeLow,\n                north: area.latitudeHigh,\n                west: area.longitudeLow,\n                east: area.longitudeHigh\n            }\n        });\n    }\n\n    /**\n     * Validate the iota area code using the library.\n     */\n    private validateIotaAreaCode(): void {\n        let isValid = false;\n        try {\n            if (this.state.userIotaAreaCode) {\n                isValid = IotaAreaCodes.isValid(this.state.userIotaAreaCode);\n            }\n        } catch (err) {\n        }\n        this.setState({ userIotaAreaCodeIsValid: isValid });\n    }\n\n    /**\n     * Update the map based on the iota area code.\n     */\n    private iotaAreaCode(): void {\n        if (this.state.userIotaAreaCode) {\n            this.updateIac(this.state.userIotaAreaCode);\n        }\n    }\n\n    /**\n     * Validate the open location code using the library.\n     */\n    private validateOpenLocationCode(): void {\n        let isValid = false;\n        try {\n            if (this.state.userOpenLocationCode) {\n                IotaAreaCodes.fromOpenLocationCode(this.state.userOpenLocationCode);\n                isValid = true;\n            }\n        } catch (err) {\n        }\n        this.setState({ userOpenLocationCodeIsValid: isValid });\n    }\n\n    /**\n     * Update the map based on the open location code.\n     */\n    private openLocationCode(): void {\n        if (this.state.userOpenLocationCode) {\n            this.updateIac(IotaAreaCodes.fromOpenLocationCode(this.state.userOpenLocationCode));\n        }\n    }\n\n    /**\n     * Reset the map.\n     */\n    private reset(): void {\n        this.setState({\n            userIotaAreaCode: undefined,\n            userIotaAreaCodeIsValid: undefined,\n            userOpenLocationCode: undefined,\n            userOpenLocationCodeIsValid: undefined,\n            latitude: undefined,\n            longitude: undefined,\n            iotaAreaCode: undefined,\n            openLocationCode: undefined,\n            zoom: undefined\n        });\n\n        if (this._highlight) {\n            this._highlight.setMap(undefined);\n        }\n    }\n}\n\nexport default Conversion;\n","/**\n * Helper functions for use with text.\n */\nexport class TextHelper {\n    /**\n     * Encode Non ASCII characters to escaped characters.\n     * @param value The value to encode.\n     * @returns The encoded value.\n     */\n    public static encodeNonASCII(value: string): string | undefined {\n        return value ? value.replace(/[\\u007F-\\uFFFF]/g, (chr) => `\\\\u${(`0000${chr.charCodeAt(0).toString(16)}`).substr(-4)}`) : undefined;\n    }\n\n    /**\n     * Decode escaped Non ASCII characters.\n     * @param value The value to decode.\n     * @returns The decoded value.\n     */\n    public static decodeNonASCII(value: string): string | undefined {\n        return value ? value.replace(/\\\\u([\\d\\w]{4})/gi, (match, grp) => String.fromCharCode(parseInt(grp, 16))) : undefined;\n    }\n}\n","import { asciiToTrytes, trytesToAscii } from \"@iota/converter\";\nimport { TextHelper } from \"./textHelper\";\n\n/**\n * Helper functions for use with trytes.\n */\nexport class TrytesHelper {\n    /**\n     * Convert an object to Trytes.\n     * @param obj The obj to encode.\n     * @returns The encoded trytes value.\n     */\n    public static toTrytes(obj: any): string {\n        const json = JSON.stringify(obj);\n        const encoded = TextHelper.encodeNonASCII(json);\n        return encoded ? asciiToTrytes(encoded) : \"\";\n    }\n\n    /**\n     * Convert an object from Trytes.\n     * @param trytes The trytes to decode.\n     * @returns The decoded object.\n     */\n    public static fromTrytes<T>(trytes: string): T {\n        // Trim trailing 9s\n        let trimmed = trytes.replace(/\\9+$/, \"\");\n\n        // And make sure it is even length (2 trytes per ascii char)\n        if (trimmed.length % 2 === 1) {\n            trimmed += \"9\";\n        }\n\n        const ascii = trytesToAscii(trimmed);\n        const json = TextHelper.decodeNonASCII(ascii);\n\n        return json ? JSON.parse(json) : undefined;\n    }\n}\n","import SocketIOClient from \"socket.io-client\";\n\n/**\n * Class to handle api communications.\n */\nexport class ApiClient {\n    /**\n     * The endpoint for performing communications.\n     */\n    private readonly _endpoint: string;\n\n    /**\n     * The web socket to communicate on.\n     */\n    private readonly _socket: SocketIOClient.Socket;\n\n    /**\n     * Called when receiving an IAC event from api.\n     */\n    private _iacCallback: (iac: string, trytes: string) => void;\n\n    /**\n     * Create a new instance of ApiClient.\n     * @param endpoint The endpoint for the api.\n     * @param iacCallback Called when receiving an IAC event from api.\n     */\n    constructor(endpoint: string, iacCallback: (iac: string, trytes: string) => void) {\n        this._endpoint = endpoint;\n\n        this._socket = SocketIOClient(this._endpoint);\n\n        this._iacCallback = iacCallback;\n\n        this._socket.on(\"iac\", (data: {\n            /**\n             * IAC.\n             */\n            iac: string;\n            /**\n             * Transaction Trytes.\n             */\n            trytes: string;\n        }) => {\n            this._iacCallback(data.iac, data.trytes);\n        });\n    }\n}\n","import classnames from \"classnames\";\nimport GoogleMapReact from \"google-map-react\";\nimport * as IotaAreaCodes from \"iota-area-codes\";\nimport { Button } from \"iota-react-components\";\nimport React, { Component, ReactNode } from \"react\";\nimport { ServiceFactory } from \"../../factories/serviceFactory\";\nimport { TrytesHelper } from \"../../helpers/trytesHelper\";\nimport { IConfiguration } from \"../../models/config/IConfiguration\";\nimport { ConfigurationService } from \"../../services/configurationService\";\nimport { TangleExplorerService } from \"../../services/tangleExplorerService\";\nimport \"./IACTransactionCard.scss\";\nimport { IACTransactionCardProps } from \"./IACTransactionCardProps\";\nimport { IACTransactionCardState } from \"./IACTransactionCardState\";\n\n/**\n * Component to display an IAC transaction.\n */\nclass IACTransactionCard extends Component<IACTransactionCardProps, IACTransactionCardState> {\n    /**\n     * The configuration.\n     */\n    private readonly _configuration: IConfiguration;\n\n    /**\n     * The tangle explorer service.\n     */\n    private readonly _tangleExplorerService: TangleExplorerService;\n\n    /**\n     * The area.\n     */\n    private readonly _area: IotaAreaCodes.IacCodeArea;\n\n    /**\n     * Create a new instance of EventCard.\n     * @param props The props.\n     */\n    constructor(props: IACTransactionCardProps) {\n        super(props);\n\n        this._configuration = ServiceFactory.get<ConfigurationService<IConfiguration>>(\"configuration\").get();\n        this._tangleExplorerService = ServiceFactory.get<TangleExplorerService>(\"tangleExplorer\");\n\n        // tslint:disable-next-line:completed-docs\n        const payload = TrytesHelper.fromTrytes<{ message: string }>(this.props.transaction.signatureMessageFragment);\n\n        this._area = IotaAreaCodes.decode(this.props.iotaAreaCode);\n\n        this.state = {\n            showMap: false,\n            message: payload.message\n        };\n    }\n\n    /**\n     * Render the component.\n     * @returns The node to render.\n     */\n    public render(): ReactNode {\n        return (\n            <div className=\"iac-transaction-card\">\n                <div className=\"iac-transaction--title\">\n                    {this.state.message}\n                </div>\n                <div className=\"iac-transaction--actions\">\n                    <Button long={true} onClick={() => this._tangleExplorerService.transaction(this.props.transaction.hash)}>{this.props.transaction.hash}</Button>\n                </div>\n                <div className=\"iac-transaction--map-container\">\n                    <a\n                        className=\"iac-transaction--map-toggle icon-up-down\"\n                        onClick={() => this.setState({ showMap: !this.state.showMap })}\n                        role=\"button\"\n                    >{this.state.showMap ? \"Hide Map\" : \"Show Map\"}&nbsp;\n                    </a>\n\n                    <div\n                        className={classnames(\n                            \"iac-transaction--map\",\n                            { \"iac-transaction--map__hidden\": !this.state.showMap }\n                        )}\n                    >\n                        <GoogleMapReact\n                            bootstrapURLKeys={{ key: this._configuration.googleMapsKey }}\n                            defaultCenter={{\n                                lat: this._area.latitude,\n                                lng: this._area.longitude\n                            }}\n                            defaultZoom={19}\n                            onGoogleApiLoaded={(e) => this.apiLoaded(e.map, e.maps)}\n                            yesIWantToUseGoogleMapApiInternals={true}\n                        />\n                    </div>\n                </div>\n            </div>);\n    }\n\n    /**\n     * The google maps api was loaded capture the maps and map object.\n     * @param map The map object.\n     * @param maps The maps object.\n     */\n    private apiLoaded(map: any, maps: any): void {\n        const react = new maps.Rectangle({\n            strokeColor: \"#FF0000\",\n            strokeOpacity: 0.8,\n            strokeWeight: 2,\n            fillColor: \"#FF0000\",\n            fillOpacity: 0.35,\n            bounds: {\n                south: this._area.latitudeLow,\n                north: this._area.latitudeHigh,\n                west: this._area.longitudeLow,\n                east: this._area.longitudeHigh\n            }\n        });\n\n        react.setMap(map);\n    }\n}\n\nexport default IACTransactionCard;\n","import { composeAPI, generateAddress } from \"@iota/core\";\nimport { asTransactionObject } from \"@iota/transaction-converter\";\nimport GoogleMapReact, { ClickEventValue } from \"google-map-react\";\nimport * as IotaAreaCodes from \"iota-area-codes\";\nimport { Button, ButtonContainer, Fieldset, Form, FormActions, FormStatus, Heading } from \"iota-react-components\";\nimport React, { Component, ReactNode } from \"react\";\nimport { ServiceFactory } from \"../../factories/serviceFactory\";\nimport { TrytesHelper } from \"../../helpers/trytesHelper\";\nimport { IConfiguration } from \"../../models/config/IConfiguration\";\nimport { ApiClient } from \"../../services/apiClient\";\nimport { ConfigurationService } from \"../../services/configurationService\";\nimport { TangleExplorerService } from \"../../services/tangleExplorerService\";\nimport IACTransactionCard from \"../components/IACTransactionCard\";\nimport { ServerState } from \"./ServerState\";\n\n/**\n * Component which will show use of server api.\n */\nclass Server extends Component<any, ServerState> {\n    /**\n     * The configuration.\n     */\n    private readonly _configuration: IConfiguration;\n\n    /**\n     * The api client.\n     */\n    private readonly _apiClient: ApiClient;\n\n    /**\n     * The tangle explorer service.\n     */\n    private readonly _tangleExplorerService: TangleExplorerService;\n\n    /**\n     * The map object.\n     */\n    private _map: any;\n\n    /**\n     * The maps object.\n     */\n    private _maps: any;\n\n    /**\n     * Map highlight polygon.\n     */\n    private _highlight: any;\n\n    /**\n     * Create a new instance of Server.\n     * @param props The props.\n     */\n    constructor(props: any) {\n        super(props);\n\n        this._configuration = ServiceFactory.get<ConfigurationService<IConfiguration>>(\"configuration\").get();\n        this._apiClient = new ApiClient(this._configuration.apiEndpoint, (iac, trytes) => this.handleTransaction(iac, trytes));\n        this._tangleExplorerService = ServiceFactory.get<TangleExplorerService>(\"tangleExplorer\");\n\n        this.state = {\n            isBusy: false,\n            isErrored: false,\n            status: \"\",\n            iotaAreaCode: \"\",\n            txMessage: \"\",\n            iacTransactions: []\n        };\n    }\n\n    /**\n     * Render the component.\n     * @returns The node to render.\n     */\n    public render(): ReactNode {\n        return (\n            <React.Fragment>\n                <Heading level={1}>Create IAC Transaction</Heading>\n                <p>Select an area on the map and create a transaction tagged with that location.\n                    Once the transaction is created the server should identify it in the ZMQ feed and return it to the client.</p>\n                <Form>\n                    <div className=\"map-container\">\n                        <GoogleMapReact\n                            bootstrapURLKeys={{ key: this._configuration.googleMapsKey }}\n                            defaultCenter={{\n                                lat: 52.529562,\n                                lng: 13.413047\n                            }}\n                            defaultZoom={19}\n                            onClick={(e) => this.mapClicked(e)}\n                            onGoogleApiLoaded={(e) => this.apiLoaded(e.map, e.maps)}\n                            yesIWantToUseGoogleMapApiInternals={true}\n                        />\n                    </div>\n                    {this.state.iotaAreaCode && (\n                        <Fieldset small={true}>\n                            <label>IOTA Area Code</label>\n                            <span>{this.state.iotaAreaCode}</span>\n                        </Fieldset>\n                    )}\n                    <Fieldset>\n                        <label>Message</label>\n                        <input\n                            type=\"text\"\n                            placeholder=\"Please enter a message to include in the transaction\"\n                            value={this.state.txMessage}\n                            onChange={(e) => this.setState({ txMessage: e.target.value })}\n                            readOnly={this.state.isBusy}\n                        />\n                    </Fieldset>\n                    <FormActions>\n                        <Button disabled={this.state.isBusy || !this.state.iotaAreaCode || !this.state.txMessage} onClick={async () => this.createTransaction()}>Create Transaction</Button>\n                    </FormActions>\n                    <FormStatus message={this.state.status} isBusy={this.state.isBusy} isError={this.state.isErrored} />\n                    {this.state.transactionHash && (\n                        <React.Fragment>\n                            <p>You can view the transaction on the Tangle here, it should also appear in the Transactions list when detected by the ZMQ Server.</p>\n                            <ButtonContainer>\n                                <Button color=\"secondary\" long={true} onClick={() => this._tangleExplorerService.transaction(this.state.transactionHash)}>{this.state.transactionHash}</Button>\n                            </ButtonContainer>\n                        </React.Fragment>\n                    )}\n                    <hr />\n                    <Heading level={1}>Transactions (ZMQ Feed from API)</Heading>\n                    {this.state.iacTransactions.length === 0 && (\n                        <p>There are currently no IAC transactions to show.</p>\n                    )}\n                    {this.state.iacTransactions.length > 0 && this.state.iacTransactions.map(item => (\n                        <IACTransactionCard key={item.transaction.hash} iotaAreaCode={item.iac} transaction={item.transaction} />\n                    ))}\n\n                </Form>\n            </React.Fragment>\n        );\n    }\n\n    /**\n     * The map was clicked.\n     * @param event The click event.\n     */\n    private async mapClicked(event: ClickEventValue): Promise<void> {\n        const iac = IotaAreaCodes.encode(event.lat, event.lng);\n\n        this.setState({ iotaAreaCode: iac });\n\n        const area = IotaAreaCodes.decode(iac);\n\n        this.updateHighlight(area);\n    }\n\n    /**\n     * The google maps api was loaded capture the maps and map object.\n     * @param map The map object.\n     * @param maps The maps object.\n     */\n    private apiLoaded(map: any, maps: any): void {\n        this._map = map;\n        this._maps = maps;\n    }\n\n    /**\n     * Create a transaction on the tangle.\n     */\n    private async createTransaction(): Promise<void> {\n        this.setState(\n            {\n                isBusy: true,\n                isErrored: false,\n                status: \"Creating transaction, please wait...\",\n                transactionHash: \"\"\n            },\n            async () => {\n                try {\n                    const iota = composeAPI({\n                        provider: this._configuration.node.provider\n                    });\n\n                    const nextAddress = generateAddress(this._configuration.seed, 0, 2);\n\n                    const trytes = await iota.prepareTransfers(\n                        \"9\".repeat(81),\n                        [\n                            {\n                                address: nextAddress,\n                                value: 0,\n                                message: TrytesHelper.toTrytes({ message: this.state.txMessage }),\n                                tag: this.state.iotaAreaCode\n                            }\n                        ]);\n\n                    const bundle = await iota.sendTrytes(trytes, this._configuration.node.depth, this._configuration.node.mwm);\n\n                    this.setState({\n                        isBusy: false,\n                        status: \"\",\n                        isErrored: true,\n                        transactionHash: bundle[0].hash\n                    });\n                } catch (err) {\n                    this.setState({\n                        isBusy: false,\n                        status: err.message,\n                        isErrored: true\n                    });\n                }\n            });\n    }\n\n    /**\n     * Update the highlight on the map.\n     * @param area The area to highlight.\n     */\n    private updateHighlight(area: IotaAreaCodes.IacCodeArea): void {\n        if (this._highlight) {\n            this._highlight.setMap(undefined);\n        }\n\n        this._highlight = new this._maps.Rectangle({\n            strokeColor: \"#FF0000\",\n            strokeOpacity: 0.8,\n            strokeWeight: 2,\n            fillColor: \"#FF0000\",\n            fillOpacity: 0.35,\n            map: this._map,\n            bounds: {\n                south: area.latitudeLow,\n                north: area.latitudeHigh,\n                west: area.longitudeLow,\n                east: area.longitudeHigh\n            }\n        });\n    }\n\n    /**\n     * Handle an IAC transaction from the server.\n     * @param iac The IOTA Area Code.\n     * @param trytes The trytes for the transaction.\n     */\n    private handleTransaction(iac: string, trytes: string): void {\n        this.state.iacTransactions.unshift({ iac, transaction: asTransactionObject(trytes) });\n        this.setState({ iacTransactions: this.state.iacTransactions.slice(0, 10) });\n    }\n}\n\nexport default Server;\n","import \"iota-css-theme\";\nimport { Footer, GoogleAnalytics, Header, LayoutAppSingle, SideMenu, StatusMessage } from \"iota-react-components\";\nimport React, { Component, ReactNode } from \"react\";\nimport { Link, Route, RouteComponentProps, Switch, withRouter } from \"react-router-dom\";\nimport logo from \"../assets/logo.svg\";\nimport contentHomePage from \"../content/contentHomePage.json\";\nimport { ServiceFactory } from \"../factories/serviceFactory\";\nimport { IConfiguration } from \"../models/config/IConfiguration\";\nimport { ConfigurationService } from \"../services/configurationService\";\nimport { TangleExplorerService } from \"../services/tangleExplorerService\";\nimport { AppState } from \"./AppState\";\nimport Conversion from \"./routes/Conversion\";\nimport Server from \"./routes/Server\";\n\n/**\n * Main application class.\n */\nclass App extends Component<RouteComponentProps, AppState> {\n    /**\n     * The configuration for the app.\n     */\n    private _configuration?: IConfiguration;\n\n    /**\n     * Create a new instance of App.\n     * @param props The props.\n     */\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            isBusy: true,\n            status: \"Loading Configuration...\",\n            statusColor: \"info\",\n            isSideMenuOpen: false\n        };\n    }\n\n    /**\n     * The component mounted.\n     */\n    public async componentDidMount(): Promise<void> {\n        try {\n            const configService = new ConfigurationService<IConfiguration>();\n            const configId = process.env.REACT_APP_CONFIG_ID || \"local\";\n            const config = await configService.load(`/data/config.${configId}.json`);\n\n            ServiceFactory.register(\"configuration\", () => configService);\n            ServiceFactory.register(\"tangleExplorer\", () => new TangleExplorerService(config.tangleExplorer));\n\n            this._configuration = config;\n\n            this.setState({\n                isBusy: false,\n                status: \"\",\n                statusColor: \"success\"\n            });\n        } catch (err) {\n            this.setState({\n                isBusy: false,\n                status: err.message,\n                statusColor: \"danger\"\n            });\n        }\n    }\n\n    /**\n     * Render the component.\n     * @returns The node to render.\n     */\n    public render(): ReactNode {\n        return (\n            <React.Fragment>\n                <Header\n                    title=\"IOTA Area Codes\"\n                    topLinks={contentHomePage.headerTopLinks}\n                    logo={logo}\n                    compact={true}\n                    hamburgerClick={() => this.setState({ isSideMenuOpen: !this.state.isSideMenuOpen })}\n                    hamburgerMediaQuery=\"tablet-up-hidden\"\n                />\n                <nav className=\"tablet-down-hidden\">\n                    <Link className=\"link\" to=\"/\">Conversion</Link>\n                    <Link className=\"link\" to=\"/server\">Server</Link>\n                </nav>\n                <SideMenu\n                    isMenuOpen={this.state.isSideMenuOpen}\n                    handleClose={() => this.setState({ isSideMenuOpen: false })}\n                    history={this.props.history}\n                    items={[\n                        {\n                            name: \"IOTA Area Codes\",\n                            isExpanded: true,\n                            items: [\n                                {\n                                    items: [\n                                        {\n                                            name: \"Conversion\",\n                                            link: \"/\"\n                                        },\n                                        {\n                                            name: \"Server\",\n                                            link: \"/server\"\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ]}\n                    selectedItemLink={this.props.location.pathname}\n                    mediaQuery=\"tablet-up-hidden\"\n                />\n                <section className=\"content\">\n                    <LayoutAppSingle>\n                        <StatusMessage status={this.state.status} color={this.state.statusColor} isBusy={this.state.isBusy} />\n                        {!this.state.status && (\n                            <Switch>\n                                <Route exact={true} path=\"/\" component={() => (<Conversion hash={Date.now()} />)} />\n                                <Route exact={true} path=\"/server\" component={() => (<Server hash={Date.now()} />)} />\n                        </Switch>\n                        )}\n                    </LayoutAppSingle>\n                </section>\n                <Footer history={this.props.history} sections={contentHomePage.footerSections} staticContent={contentHomePage.footerStaticContent} />\n                <GoogleAnalytics id={this._configuration && this._configuration.googleAnalyticsId} />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default withRouter(App);\n","import { RouterScrollTop } from \"iota-react-components\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./app/App\";\nimport \"./index.scss\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <React.Fragment>\n            <RouterScrollTop />\n            <App />\n        </React.Fragment>\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}